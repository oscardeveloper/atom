function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const TransformCache = require('./transform-cache');
const generateSnapshotScript = require('./generate-snapshot-script');

module.exports = (() => {
  var _ref = _asyncToGenerator(function* (options) {
    const cacheInvalidationKey = options.shouldExcludeModule.toString() + require('../package.json').version;
    const cache = new TransformCache(options.cachePath, cacheInvalidationKey);
    yield cache.loadOrCreate();
    delete options.cachePath;

    const result = yield generateSnapshotScript(cache, options);
    yield cache.dispose();
    return result;
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();